import numpy as np
from scipy import stats
import pandas as pd
import statsmodels
import sklearn
import seaborn as sns
import matplotlib.pyplot as plt


#pulling in data from excel file
navi1 = pd.read_excel("C:\\Users\\Daniel Padilla\\Daniel Padilla - One Drive\\HealthPlanX\\2024\\HealthPlanX Data.xlsx",sheet_name='TP1 Data')


regions_of_interest = ['San Francisco','East Bay']
navi1 = navi1[(navi1['LOB'] == 'Medicare') & (navi1['Region'].isin(regions_of_interest))]
#print(navi1)


dummies = pd.get_dummies(navi1, columns=['Region', 'Sex'], dtype='float')
navi1 = dummies


plt.figure(figsize=(5, 3))
sns.histplot(data=navi1, x='Age', hue='HealthPlanX', kde=True, element='step', stat='density', common_norm=False)

# Add titles and labels
plt.title('Distribution of RetroRiskScore Between Treated and Untreated Groups')
plt.xlabel('covariate')
plt.ylabel('Density')

# Show the plot
plt.show()


import statsmodels.api as sm

covariates = ['Sex_F', 'Sex_M', 'Age', 'retrorisk', 'SNFAdmitsFromIP','Year_2021', 'Year_2022', 'Year_2023', 'Q1', 'Q2', 'Q3', 'Q4', 'Region_East Bay', 'Region_San Francisco']

model = sm.Logit(navi1['HealthPlanX'], sm.add_constant(navi1[covariates]))
result = model.fit(maxiter=10000, tol=1e-4)  # Increase max iterations and adjust tolerance

navi1['propensity_score'] = result.predict(sm.add_constant(navi1[covariates]))
#print(navi1[['HealthPlanX','propensity_score']])


navi1['weight'] = np.where(navi1['HealthPlanX'] == 1, 
                          1 / navi1['propensity_score'], 
                          1 / (1 - navi1['propensity_score']))
#print(navi1[['HealthPlanX','propensity_score','weight']])

navi1.to_excel(r"C:\Users\DRP03675\OneDrive - Hill Physicians Medical Group, Inc\Daniel Padilla\propscore_test.xlsx",sheet_name='Intro', index=False)


plt.hist(navi1[navi1['HealthPlanX'] == 1]['propensity_score'], bins=20, alpha=0.5, label='Treated')
plt.hist(navi1[navi1['HealthPlanX'] == 0]['propensity_score'], bins=20, alpha=0.5, label='Untreated')
plt.xlabel('Propensity Score')
plt.ylabel('Frequency')
plt.title('Distribution of Propensity Scores')
plt.legend()
plt.show()

plt.hist(navi1[navi1['HealthPlanX'] == 1]['weight'], bins=20, alpha=0.5, label='Treated')
plt.hist(navi1[navi1['HealthPlanX'] == 0]['weight'], bins=20, alpha=0.5, label='Untreated')
plt.xlabel('Weight')
plt.ylabel('Frequency')
plt.title('Distribution of Weight')
plt.legend()
plt.show()
